local ____lualib = require("lualib_bundle")
local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
__TS__SourceMapTraceBack(debug.getinfo(1).short_src, {["5"] = 6,["6"] = 2,["7"] = 2,["8"] = 3,["9"] = 3,["10"] = 97,["11"] = 98,["12"] = 100,["14"] = 104,["15"] = 105,["16"] = 106,["17"] = 107,["20"] = 111,["21"] = 113,["22"] = 114,["23"] = 115,["25"] = 117,["28"] = 120,["31"] = 125,["32"] = 126,["33"] = 126,["34"] = 126,["35"] = 126,["37"] = 6,["38"] = 7,["39"] = 8,["40"] = 9,["41"] = 12,["42"] = 13,["43"] = 14,["44"] = 16,["45"] = 17,["46"] = 18,["47"] = 19,["48"] = 20,["49"] = 12,["50"] = 24,["51"] = 26,["52"] = 26,["53"] = 26,["55"] = 26,["56"] = 26,["57"] = 28,["58"] = 29,["59"] = 30,["60"] = 31,["61"] = 32,["62"] = 33,["63"] = 34,["64"] = 35,["65"] = 36,["66"] = 37,["67"] = 37,["70"] = 24,["71"] = 44,["72"] = 46,["73"] = 47,["74"] = 48,["75"] = 49,["76"] = 50,["77"] = 51,["80"] = 55,["81"] = 55,["83"] = 58,["84"] = 59,["85"] = 60,["87"] = 64,["88"] = 65,["90"] = 44,["91"] = 70,["92"] = 72,["93"] = 73,["94"] = 74,["96"] = 70,["97"] = 78,["98"] = 79,["99"] = 80,["100"] = 82,["101"] = 82,["103"] = 84,["104"] = 85,["105"] = 86,["106"] = 89,["107"] = 91,["108"] = 93,["109"] = 94,["110"] = 78,["111"] = 129});

local walk, changeAnimation, animate, clamp, thisSprite, baseVelocity, flip
local ____constants = require("constants")
local DIRECTION = ____constants.DIRECTION
local ____math = require("math")
local vmath2 = ____math.vmath2
function walk(self)
    self.velocity.x = baseVelocity * self.direction
    flip(nil, self.direction)
end
function changeAnimation(self, newAnimation)
    if self.animation ~= newAnimation then
        sprite.play_flipbook(thisSprite, newAnimation)
        self.animation = newAnimation
    end
end
function animate(self)
    if self.grounded then
        if self.velocity.x == 0 then
            changeAnimation(self, "idle")
        else
            changeAnimation(self, "walk")
        end
    else
        changeAnimation(self, "airborne")
    end
end
function clamp(self, value, min, max)
    return math.min(
        math.max(value, min),
        max
    )
end
thisSprite = "#sprite"
baseVelocity = 500
local gravity = 1000
local jumpTakeOff = 700
function init(self)
    msg.post("#", "acquire_input_focus")
    msg.post("@system:", "toggle_physics_debug")
    self.velocity = vmath.vector3(0, 0, 0)
    self.direction = 0
    self.grounded = false
    self.animation = "idle"
    self.correction = vmath.vector3(0, 0, 0)
end
function on_input(self, actionId, action)
    local function isKeyPressed(____, key, hid)
        if hid == nil then
            hid = actionId
        end
        return hid == hash(key)
    end
    if isKeyPressed(nil, "right") then
        self.direction = DIRECTION.right
        walk(self)
    elseif isKeyPressed(nil, "left") then
        self.direction = DIRECTION.left
        walk(self)
    elseif isKeyPressed(nil, "jump") then
        if action.pressed and self.grounded then
            self.grounded = false
            local ____self_velocity_0, ____y_1 = self.velocity, "y"
            ____self_velocity_0[____y_1] = ____self_velocity_0[____y_1] + jumpTakeOff
        end
    end
end
local function handleCollision(self, normal, distance)
    if distance > 0 then
        local projection = vmath.project(self.correction, normal * distance)
        if projection < 1 then
            local compensation = (distance - distance * projection) * normal
            go.set_position(go.get_position() + compensation)
            self.correction = self.correction + compensation
        end
    end
    if math.abs(normal) > 0 then
        self.velocity.x = 0
    end
    if normal.y > 0 then
        self.grounded = true
        self.velocity.y = 0
    end
    if normal.y < 0 then
        self.velocity.y = 0
    end
end
function on_message(self, messageId, message)
    if messageId == hash("contact_point_response") and message.other_group == hash("level") then
        handleCollision(self, message.normal, message.distance)
        pprint(message)
    end
end
function fixed_update(self, dt)
    self.velocity.y = self.velocity.y - gravity * dt
    self.velocity.y = clamp(nil, self.velocity.y, -2000, 20000)
    if self.grounded then
        self.velocity.y = 0
    end
    local position = go.get_position()
    position.x = position.x + self.velocity.x * dt
    position.y = position.y + self.velocity.y * dt
    go.set_position(position)
    animate(self)
    self.velocity.x = 0
    self.grounded = false
end
flip = function(____, direction) return sprite.set_hflip(thisSprite, direction < 0) end

